name: Deploy Website

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1 

      - name: Install Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) dev" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install terraform

      - name: Terraform Init
        run: terraform init

      - name: Terraform plan
        run: terraform plan

      - name: Terraform Apply - S3 Bucket
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: terraform apply -auto-approve -target=aws_s3_bucket.website_bucket
        
      #- name: Deploy to S3 Bucket
       # if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        # run: aws s3 cp gauritest1/index.html s3://gauritest1/

      - name: Terraform Apply - CloudFront
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: terraform apply -auto-approve -target=aws_cloudfront_origin_access_identity.origin_access_identity
                                 -target=aws_cloudfront_distribution.s3_distribution 
        
           
      - name: Invalidate CloudFront Cache
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
         run: |
          cloudfront_distribution_id=$(cat path/to/your/variable_file.yml | yq -r .CLOUDFRONT_DISTRIBUTION_ID)
          aws cloudfront create-invalidation --distribution-id "$cloudfront_distribution_id" --paths "/*"


        # Fetch the CloudFront distribution ID from Terraform output
      # - name: Get CloudFront distribution ID
       # id: tf_output
        # run: |
         # distribution_id=$(terraform output -json distribution_id | jq -r '.value')
         # echo "CloudFront distribution ID is $distribution_id"
         # echo "CLOUDFRONT_DISTRIBUTION_ID=$distribution_id" >> $GITHUB_ENV
          
          
      - name: Terraform Apply - ACM Certificate
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: terraform apply -auto-approve -target=aws_acm_certificate.ssl_certificate 
                                         
      - name: Terraform Apply - Route 53
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: terraform apply -auto-approve -target=aws_route53_record.www-a
                                 -target=aws_route53_record.cert_validation
                                 
       # Add an approval step before running destruction
      # - name: Manual approval for Terraform Destruction
      # if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
       # run: echo "Approve the Terraform destruction by clicking the Approve button on the Actions tab."
      
      #- name: Terraform Destroy
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
     #   run: terraform destroy -auto-approve

